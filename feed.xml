<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/">
    <title>Constantly Underwhelmed</title>
    <link href="https://www.constantlyunderwhelmed.com/feed.xml" rel="self" />
    <link href="https://www.constantlyunderwhelmed.com" />
    <updated>2024-09-08T22:59:24-07:00</updated>
    <author>
        <name>Elio Grieco</name>
    </author>
    <id>https://www.constantlyunderwhelmed.com</id>

    <entry>
        <title>Hard vs Easy Languages</title>
        <author>
            <name>Elio Grieco</name>
        </author>
        <link href="https://www.constantlyunderwhelmed.com/posts/hard-vs-easy-languages/"/>
        <id>https://www.constantlyunderwhelmed.com/posts/hard-vs-easy-languages/</id>
            <category term="type systems"/>
            <category term="runtime errors"/>
            <category term="programming languages"/>

        <updated>2022-10-23T14:41:00-07:00</updated>
            <summary>
                <![CDATA[
                    Rust/Haskell/OCaml/Idris/et. al. are “hard” because they force you to understand the whole problem you are solving with your code. “Easy” languages are generally easy because they let you do stupid things that you or your users will pay for at runtime.
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p><a href="https://www.rust-lang.org/">Rust</a>/<a href="https://www.haskell.org/">Haskell</a>/<a href="https://ocaml.org/">OCaml</a>/<a href="https://www.idris-lang.org/">Idris</a>/et. al. are <strong>“hard”</strong> because they force you to understand the whole problem you are solving with your code. <strong>“Easy”</strong> languages are generally easy because they let you do stupid things that you or your users will pay for at runtime.</p>
            ]]>
        </content>
    </entry>
    <entry>
        <title>More Training</title>
        <author>
            <name>Elio Grieco</name>
        </author>
        <link href="https://www.constantlyunderwhelmed.com/posts/more-training/"/>
        <id>https://www.constantlyunderwhelmed.com/posts/more-training/</id>
            <category term="training"/>
            <category term="systems thinking"/>
            <category term="cybersecurity"/>

        <updated>2022-10-20T08:46:00-07:00</updated>
            <summary>
                <![CDATA[
                    This quote applies equally well to cybersecurity, software design, and the broader tech industry: The insight that “Every system is perfectly designed to get the results it gets,” together with its corollary, “If we keep doing what we’ve been doing, we’ll keep getting what we’ve&hellip;
                ]]>
            </summary>
        <content type="html">
            <![CDATA[
                <p>This quote applies equally well to cybersecurity, software design, and the broader tech industry:</p><blockquote>
<p>The insight that “Every system is perfectly designed to get the results it gets,” together with its corollary, “If we keep doing what we’ve been doing, we’ll keep getting what we’ve been getting,” provide profound insight for mitigating the problem of unwarranted practice variation. Healthcare leaders too often identify “re-education” as a solution to a multitude of problems. <strong>A solution like “re-education” rests on the assumption that the system itself is not the problem. Without changing the causal system, the leaders will likely find that a need for “re-education” keeps recurring.</strong> Among the sample of ideas presented for what to do differently to mitigate unwarranted practice variation: In general, design systems so that doing the right thing is the easiest way to do the work; a checklist is one example. Confirm that assumed processes indeed exist and unfold predictably and within desired limits.</p></blockquote>
<p><a href="https://link.springer.com/chapter/10.1007/978-3-030-94655-5_19">Source</a>: Schulman, J. (2022). “Every System Is Perfectly Designed to Get the Results It Gets”. In: Schulman, J. (eds) The Problem of Practice Variation in Newborn Medicine. Springer, Cham. <a href="https://doi.org/10.1007/978-3-030-94655-5_19">https://doi.org/10.1007/978-3-030-94655-5_19</a></p>
            ]]>
        </content>
    </entry>
</feed>
